CREATE TABLE IF NOT EXISTS logins (
   login varchar,
   id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
   CONSTRAINT login_unique UNIQUE (login)
   --CONSTRAINT logins_pk PRIMARY KEY (login)
);

CREATE TABLE IF NOT EXISTS ratings (
    id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    mpa varchar,
    description varchar,
    CONSTRAINT mpa_unique UNIQUE (mpa)
    --CONSTRAINT ratings_pk PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS users (
    id int REFERENCES logins(id),
    name varchar,
    birthday date,
    CONSTRAINT users_pk PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS films (
    id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name varchar,
    description varchar,
    releaseDate date,
    duration int,
    rating int REFERENCES ratings(id)
);

CREATE TABLE IF NOT EXISTS friendship_status (
    status boolean,
    CONSTRAINT friendship_status_pk PRIMARY KEY (status)
);

CREATE TABLE IF NOT EXISTS likes (
    film_id int REFERENCES films(id),
    user_id int REFERENCES users(id),
    CONSTRAINT likes_pk PRIMARY KEY (film_id, user_id)
);

CREATE TABLE IF NOT EXISTS genres (
    id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    description varchar,
    CONSTRAINT description_unique UNIQUE (description)
);

CREATE TABLE IF NOT EXISTS films_by_genre (
    film_id int REFERENCES films(id),
    genre_id int REFERENCES genres(id),
    CONSTRAINT films_by_genre_pk PRIMARY KEY (film_id, genre_id)
);

CREATE TABLE IF NOT EXISTS friends (
    user_id int REFERENCES users(id),
    friend_id int REFERENCES users(id),
    friendship_status boolean REFERENCES friendship_status(status),
    CONSTRAINT friends_pk PRIMARY KEY (user_id, friend_id)
);

CREATE TABLE IF NOT EXISTS emails (
   email varchar,
   id int REFERENCES users(id),
   CONSTRAINT emails_pk PRIMARY KEY (email)
);